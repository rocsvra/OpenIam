{"version":3,"sources":["webpack://iam/webpack/universalModuleDefinition","webpack://iam/./src/IdsApi.ts","webpack://iam/./src/index.ts","webpack://iam/webpack/bootstrap","webpack://iam/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","settings","this","_iamOptions","hasPermission","accessToken","permissionKey","isAdminRequired","invokeInternalAsync","Authority","getCurrentUserBasicInfoAsync","getViewPermissions","treeView","createUserAsync","model","updateUserAsync","userId","url","method","body","IsSucceed","Message","req","Request","JSON","stringify","headers","fetch","resp","ok","StatusCode","status","json","Data","error","detail","IdsApi","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAa,IAAID,IAEjBD,EAAU,IAAIC,IARhB,CASGK,MAAM,WACT,M,4+CCLA,iBAII,WAAYC,GACRC,KAAKC,YAAcF,EAiG3B,OAzFW,YAAAG,cAAP,SAAqBC,EAAqBC,EAAuBC,GAC7D,YAD6D,IAAAA,OAAA,GACtDL,KAAKM,oBAAgCN,KAAKC,YAAYM,UAAS,+BAA+BH,EAAa,YAAYC,EAAmB,MAAO,KAAMF,IAMrJ,YAAAK,6BAAb,SAA0CL,G,mEACtC,MAAO,CAAP,EAAOH,KAAKM,oBAAyCN,KAAKC,YAAYM,UAAS,YAAa,MAAO,KAAMJ,WAOtG,YAAAM,mBAAP,SAA0BC,QAAA,IAAAA,OAAA,IAUb,YAAAC,gBAAb,SAA6BC,EAAmBT,G,mEAC5C,MAAO,CAAP,EAAOH,KAAKM,oBAAuCN,KAAKC,YAAYM,UAAS,mBAAoB,OAAQK,EAAOT,WASvG,YAAAU,gBAAb,SAA6BC,EAAgBF,EAAsBT,G,mEAC/D,MAAO,CAAP,EAAOH,KAAKM,oBAAuBN,KAAKC,YAAYM,UAAS,oBAAoBO,EAAU,MAAOF,EAAOT,WAU/F,YAAAG,oBAAd,SAAgDS,EAAaC,EAAgBC,EAAWd,G,sGACpF,GAAmB,MAAfA,EACA,MAAO,CAAP,EAAyB,CACrBe,WAAW,EACXC,QAAS,sBAIbC,EAAM,IAAIC,QAAQN,EAAK,CACvBC,OAAQA,EACRC,KAAc,MAARA,EAAeK,KAAKC,UAAUN,GAAQ,KAC5CO,QAAS,CACL,cAAiB,UAAUrB,EAC3B,eAAgB,qC,iBAKT,O,sBAAA,GAAMsB,MAAML,I,cAAnBM,EAAO,UACFC,I,GAEDT,WAAW,EACXU,WAAYF,EAAKG,QACJ,GAAMH,EAAKI,SAJ5B,M,OACA,MAAO,CAAP,GAGI,EAAAC,KAAa,S,WAIa,SAAML,EAAKI,Q,OACzC,OADIE,EAA0B,SACvB,CAAP,EAAyB,CACrBd,WAAW,EACXU,WAAYF,EAAKG,OACjBV,QAASa,EAAMC,S,0BAKvB,MAAO,CAAP,EAAyB,CACrBf,WAAW,EACXC,Q,oCAKhB,EAtGA,GAAa,EAAAe,U,8ECLb,aAEQ,sEAFA,EAAAA,YCCJC,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAU3C,QAG3C,IAAIC,EAASwC,EAAyBE,GAAY,CAGjD3C,QAAS,IAOV,OAHA4C,EAAoBD,GAAUE,KAAK5C,EAAOD,QAASC,EAAQA,EAAOD,QAAS0C,GAGpEzC,EAAOD,QCjBR0C,CAAoB,K","file":"iam-client.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"iam\"] = factory();\n\telse\n\t\troot[\"iam\"] = factory();\n})(self, function() {\nreturn ","import { ApiResponseError } from \"./ApiResponseError\";\r\nimport ApiResult from \"./ApiResult\";\r\nimport IamBasicOptions from \"./IamBasicOptions\";\r\nimport { UserBasicInfoDto, UserNewDto, UserNewRespDto, UserUpdateDto } from \"./UserDtos\";\r\n\r\nexport class IdsApi {\r\n\r\n    private _iamOptions: IamBasicOptions;\r\n\r\n    constructor(settings: IamBasicOptions) {\r\n        this._iamOptions = settings;\r\n    }\r\n\r\n    /**\r\n     * 判断用户是否拥有权限\r\n     * @param permissionKey 权限的Key\r\n     * @param isAdminRequired 是否要求是管理员\r\n     */\r\n    public hasPermission(accessToken: string, permissionKey: string, isAdminRequired: boolean = false): Promise<ApiResult<boolean>> {\r\n        return this.invokeInternalAsync<boolean>(`${this._iamOptions.Authority}/api/user/permcheck?permkey=${permissionKey}&isadmin=${isAdminRequired}`, 'get', null, accessToken);\r\n    }\r\n\r\n    /**\r\n     * 获取当前登录用户的基本信息\r\n     */\r\n    public async getCurrentUserBasicInfoAsync(accessToken: string): Promise<ApiResult<UserBasicInfoDto>> {\r\n        return this.invokeInternalAsync<UserBasicInfoDto>(`${this._iamOptions.Authority}/api/user`, 'get', null, accessToken);\r\n    }\r\n\r\n    /**\r\n     * 获取视图（菜单）权限\r\n     * @param treeView 是否以树状结构返回\r\n     */\r\n    public getViewPermissions(treeView: boolean = false) {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 添加新用户\r\n     * @param model 用于新增用户的数据模型\r\n     * @param accessToken 当前登陆用户的 access token\r\n     */\r\n    public async createUserAsync(model: UserNewDto, accessToken: string): Promise<ApiResult<UserNewRespDto>> {\r\n        return this.invokeInternalAsync<UserNewRespDto>(`${this._iamOptions.Authority}/admin/api/users`, 'post', model, accessToken);\r\n    }\r\n\r\n    /**\r\n    * 更新用户\r\n    * @param userId 用户编号\r\n    * @param model 用于更新用户的数据模型\r\n    * @param accessToken 当前登陆用户的 access token\r\n    */\r\n    public async updateUserAsync(userId: string, model: UserUpdateDto, accessToken: string): Promise<ApiResult> {\r\n        return this.invokeInternalAsync(`${this._iamOptions.Authority}/admin/api/users/${userId}`, 'put', model, accessToken);\r\n    }\r\n\r\n    /**\r\n     * 内部调用\r\n     * @param url \r\n     * @param method \r\n     * @param body \r\n     * @param accessToken \r\n     */\r\n    private async invokeInternalAsync<TData = void>(url: string, method: string, body: any, accessToken: string): Promise<ApiResult<TData>> {\r\n        if (accessToken == null) {\r\n            return <ApiResult<TData>>{\r\n                IsSucceed: false,\r\n                Message: 'Access token 不能为空'\r\n            }\r\n        }\r\n\r\n        var req = new Request(url, {\r\n            method: method,\r\n            body: body != null ? JSON.stringify(body) : null,\r\n            headers: {\r\n                \"Authorization\": `Bearer ${accessToken}`,\r\n                \"Content-type\": \"application/json; charset=UTF-8\"\r\n            }\r\n        });\r\n\r\n        try {\r\n            let resp = await fetch(req);\r\n            if (resp.ok) {\r\n                return <ApiResult<TData>>{\r\n                    IsSucceed: true,\r\n                    StatusCode: resp.status,\r\n                    Data: <TData>await resp.json()\r\n                };\r\n            }\r\n            else {\r\n                let error = <ApiResponseError>await resp.json();\r\n                return <ApiResult<TData>>{\r\n                    IsSucceed: false,\r\n                    StatusCode: resp.status,\r\n                    Message: error.detail\r\n                };\r\n            }\r\n        } catch (exception) {\r\n            // 发生网络错误\r\n            return <ApiResult<TData>>{\r\n                IsSucceed: false,\r\n                Message: exception\r\n            };\r\n        }\r\n    }\r\n\r\n}\r\n","import {IdsApi} from \"./IdsApi\";\r\n\r\nexport {IdsApi}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(22);\n"],"sourceRoot":""}